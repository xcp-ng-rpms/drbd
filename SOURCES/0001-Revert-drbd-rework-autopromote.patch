From e136ea893448550d43922316381a3f7ea196a302 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.tech>
Date: Mon, 15 Jul 2024 17:31:36 +0200
Subject: [PATCH] Revert "drbd: rework autopromote"

This reverts commit e3ef0e2.
and adapts the compat code as neccessary.

This change brings back the exact tracking of read-only and read-write
openers.

Original: https://github.com/Philipp-Reisner/drbd/commit/2308900638617ff87605d4479be415854bec7738
Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.tech>
---
 drbd/drbd_int.h   |  4 ++--
 drbd/drbd_main.c  | 50 +++++++++++++++++++----------------------------
 drbd/drbd_nl.c    | 22 ++++++++++-----------
 drbd/drbd_req.c   | 11 ++++++-----
 drbd/drbd_state.c |  7 +++----
 5 files changed, 42 insertions(+), 52 deletions(-)

diff --git a/drbd/drbd_int.h b/drbd/drbd_int.h
index 9a3888a81..c9b6e462e 100644
--- a/drbd/drbd_int.h
+++ b/drbd/drbd_int.h
@@ -1543,8 +1543,8 @@ struct drbd_device {
 
 	struct drbd_bitmap *bitmap;
 
-	int open_cnt;
-	bool writable;
+	int open_rw_cnt, open_ro_cnt;
+
 	/* FIXME clean comments, restructure so it is more obvious which
 	 * members are protected by what */
 
diff --git a/drbd/drbd_main.c b/drbd/drbd_main.c
index 74418cf06..e11532574 100644
--- a/drbd/drbd_main.c
+++ b/drbd/drbd_main.c
@@ -55,7 +55,7 @@
 #include "drbd_dax_pmem.h"
 
 static int drbd_open(struct gendisk *gd, blk_mode_t mode);
-static void drbd_release(struct gendisk *gd);
+static void drbd_release(struct gendisk *gd, fmode_t mode);
 static void md_sync_timer_fn(struct timer_list *t);
 static int w_bitmap_io(struct drbd_work *w, int unused);
 static int flush_send_buffer(struct drbd_connection *connection, enum drbd_stream drbd_stream);
@@ -2669,9 +2669,10 @@ static enum ioc_rv inc_open_count(struct drbd_device *device, blk_mode_t mode)
 		r = IOC_ABORT;
 	else if (!resource->remote_state_change) {
 		r = IOC_OK;
-		device->open_cnt++;
-		if (mode & BLK_OPEN_WRITE)
-			device->writable = true;
+		if (mode & FMODE_WRITE)
+			device->open_rw_cnt++;
+		else
+			device->open_ro_cnt++;
 	}
 	read_unlock_irq(&resource->state_rwlock);
 
@@ -2750,7 +2751,6 @@ static int drbd_open(struct gendisk *gd, blk_mode_t mode)
 	struct drbd_device *device = gd->private_data;
 	struct drbd_resource *resource = device->resource;
 	long timeout = resource->res_opts.auto_promote_timeout * HZ / 10;
-	bool was_writable;
 	bool did_auto_promote = false;
 	enum ioc_rv r;
 	int err = 0;
@@ -2775,7 +2775,6 @@ static int drbd_open(struct gendisk *gd, blk_mode_t mode)
 	kref_debug_get(&device->kref_debug, 3);
 
 	mutex_lock(&resource->open_release);
-	was_writable = device->writable;
 
 	timeout = wait_event_interruptible_timeout(resource->twopc_wait,
 						   (r = inc_open_count(device, mode)),
@@ -2841,12 +2840,10 @@ out:
 	/* still keep mutex, but release ASAP */
 	if (!err)
 		add_opener(device, did_auto_promote);
-	else
-		device->writable = was_writable;
 
 	mutex_unlock(&resource->open_release);
 	if (err) {
-		drbd_release(gd);
+		drbd_release(gd, mode);
 		if (err == -EAGAIN && !(mode & BLK_OPEN_NDELAY))
 			err = -EMEDIUMTYPE;
 	}
@@ -2861,10 +2858,8 @@ void drbd_open_counts(struct drbd_resource *resource, int *rw_count_ptr, int *ro
 
 	rcu_read_lock();
 	idr_for_each_entry(&resource->devices, device, vnr) {
-		if (device->writable)
-			rw_count += device->open_cnt;
-		else
-			ro_count += device->open_cnt;
+		rw_count += device->open_rw_cnt;
+		ro_count += device->open_ro_cnt;
 	}
 	rcu_read_unlock();
 	*rw_count_ptr = rw_count;
@@ -2928,34 +2923,28 @@ static void drbd_fsync_device(struct drbd_device *device)
 	drbd_flush_peer_acks(resource);
 }
 
-static void drbd_release(struct gendisk *gd)
+static void drbd_release(struct gendisk *gd, fmode_t mode)
 {
 	struct drbd_device *device = gd->private_data;
 	struct drbd_resource *resource = device->resource;
-	bool was_writable;
 	int open_rw_cnt, open_ro_cnt;
 
 	mutex_lock(&resource->open_release);
-	was_writable = device->writable;
-	device->open_cnt--;
+	if (mode & FMODE_WRITE)
+		device->open_rw_cnt--;
+	else
+		device->open_ro_cnt--;
 	drbd_open_counts(resource, &open_rw_cnt, &open_ro_cnt);
 
-	/* Last one to close will be responsible for write-out of all dirty pages.
-	 * We also reset the writable flag for this device here:  later code may
-	 * check if the device is still opened for writes to determine things
-	 * like auto-demote.
-	 * Don't do the "fsync_device" if it was not marked writeable before,
-	 * or we risk a deadlock in drbd_reject_write_early().
-	 */
-	if (was_writable && device->open_cnt == 0) {
+	/* last one to close will be responsible for write-out of all dirty pages */
+	if (mode & FMODE_WRITE && device->open_rw_cnt == 0)
 		drbd_fsync_device(device);
-		device->writable = false;
-	}
 
 	if (open_ro_cnt == 0)
 		wake_up_all(&resource->state_wait);
 
-	if (test_bit(UNREGISTERED, &device->flags) && device->open_cnt == 0 &&
+	if (test_bit(UNREGISTERED, &device->flags) &&
+	    device->open_rw_cnt == 0 && device->open_ro_cnt == 0 &&
 	    !test_and_set_bit(DESTROYING_DEV, &device->flags))
 		call_rcu(&device->rcu, drbd_reclaim_device);
 
@@ -2996,8 +2985,9 @@ static void drbd_release(struct gendisk *gd)
 		end_state_change(resource, &irq_flags, "release");
 	}
 
-	/* if the open count is 0, we free the whole list, otherwise we remove the specific pid */
-	prune_or_free_openers(device, (device->open_cnt == 0) ? 0 : task_pid_nr(current));
+	/* if the open counts are 0, we free the whole list, otherwise we remove the specific pid */
+	prune_or_free_openers(device,
+			(open_ro_cnt == 0 && open_rw_cnt == 0) ? 0 : task_pid_nr(current));
 	if (open_rw_cnt == 0 && open_ro_cnt == 0 && resource->auto_promoted_by.pid != 0)
 		memset(&resource->auto_promoted_by, 0, sizeof(resource->auto_promoted_by));
 	mutex_unlock(&resource->open_release);
diff --git a/drbd/drbd_nl.c b/drbd/drbd_nl.c
index f98c223e6..6b9dbf3d1 100644
--- a/drbd/drbd_nl.c
+++ b/drbd/drbd_nl.c
@@ -1274,9 +1274,10 @@ void youngest_and_oldest_opener_to_str(struct drbd_device *device, char *buf, si
 
 	buf[0] = '\0';
 	/* Do we have opener information? */
-	if (!device->open_cnt)
+	if (!(device->open_ro_cnt + device->open_rw_cnt))
 		return;
-	cnt = snprintf(buf, len, " open_cnt:%d", device->open_cnt);
+	cnt = snprintf(buf, len, " open_ro_cnt:%d open_rw_cnt:%d",
+		       device->open_ro_cnt, device->open_rw_cnt);
 	if (cnt > 0 && cnt < len) {
 		buf += cnt;
 		len -= cnt;
@@ -1299,7 +1300,7 @@ void youngest_and_oldest_opener_to_str(struct drbd_device *device, char *buf, si
 			ts = ktime_to_timespec64(last->opened);
 			time64_to_tm(ts.tv_sec, -sys_tz.tz_minuteswest * 60, &tm);
 			snprintf(buf, len, "%s%s:%d:%04ld-%02d-%02d_%02d:%02d:%02d.%03ld]",
-			      device->open_cnt > 2 ? ", ..., " : ", ",
+			      device->open_ro_cnt + device->open_rw_cnt > 2 ? ", ..., " : ", ",
 			      last->comm, last->pid,
 			      tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
 			      tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec / NSEC_PER_MSEC);
@@ -1317,13 +1318,13 @@ static int put_device_opener_info(struct drbd_device *device, struct sk_buff *re
 	char *dotdotdot = "";
 
 	spin_lock(&device->openers_lock);
-	if (!device->open_cnt) {
+	if (!(device->open_ro_cnt + device->open_rw_cnt)) {
 		spin_unlock(&device->openers_lock);
 		return cnt;
 	}
 	drbd_msg_sprintf_info(reply_skb,
-		"/dev/drbd%d open_cnt:%d, writable:%d; list of openers follows",
-		device->minor, device->open_cnt, device->writable);
+		"/dev/drbd%d open_ro_cnt:%d, open_rw_cnt:%d; list of openers follows",
+		device->minor, device->open_ro_cnt, device->open_rw_cnt);;
 	list_for_each_entry(o, &device->openers, list) {
 		ts = ktime_to_timespec64(o->opened);
 		time64_to_tm(ts.tv_sec, -sys_tz.tz_minuteswest * 60, &tm);
@@ -4842,10 +4843,8 @@ int drbd_open_ro_count(struct drbd_resource *resource)
 	int vnr, open_ro_cnt = 0;
 
 	read_lock_irq(&resource->state_rwlock);
-	idr_for_each_entry(&resource->devices, device, vnr) {
-		if (!device->writable)
-			open_ro_cnt += device->open_cnt;
-	}
+	idr_for_each_entry(&resource->devices, device, vnr)
+		open_ro_cnt += device->open_ro_cnt;
 	read_unlock_irq(&resource->state_rwlock);
 
 	return open_ro_cnt;
@@ -6974,7 +6973,8 @@ static enum drbd_ret_code adm_del_minor(struct drbd_device *device)
 	notify_device_state(NULL, 0, device, NULL, NOTIFY_DESTROY);
 	mutex_unlock(&notification_mutex);
 
-	if (device->open_cnt == 0 && !test_and_set_bit(DESTROYING_DEV, &device->flags))
+	if (device->open_ro_cnt == 0 && device->open_rw_cnt == 0 &&
+	    !test_and_set_bit(DESTROYING_DEV, &device->flags))
 		call_rcu(&device->rcu, drbd_reclaim_device);
 
 	return ret;
diff --git a/drbd/drbd_req.c b/drbd/drbd_req.c
index d898f0a38..d7ccfe413 100644
--- a/drbd/drbd_req.c
+++ b/drbd/drbd_req.c
@@ -2543,9 +2543,9 @@ static bool drbd_reject_write_early(struct drbd_device *device, struct bio *bio)
 			kfree(buf);
 		}
 		return true;
-	} else if (device->open_cnt == 0) {
+	} else if (device->open_rw_cnt + device->open_ro_cnt == 0) {
 		drbd_err_ratelimit(device, "WRITE request, but open_cnt == 0!\n");
-	} else if (!device->writable && bio_has_data(bio)) {
+	} else if (device->open_rw_cnt == 0 && bio_has_data(bio)) {
 		/*
 		 * If the resource was (temporarily, auto) promoted,
 		 * a remount,rw may have succeeded without marking the device
@@ -2555,9 +2555,10 @@ static bool drbd_reject_write_early(struct drbd_device *device, struct bio *bio)
 		 * mutex to protect against races with new openers.
 		 */
 		mutex_lock(&resource->open_release);
-		drbd_info(device, "open_cnt:%d, implicitly promoted to writable\n",
-			device->open_cnt);
-		device->writable = true;
+		drbd_info(device, "open_ro_cnt:%d, implicitly promoted to writable\n",
+			device->open_ro_cnt);
+		device->open_rw_cnt++;
+		device->open_ro_cnt--;
 		mutex_unlock(&resource->open_release);
 	}
 	return false;
diff --git a/drbd/drbd_state.c b/drbd/drbd_state.c
index 973395559..2a63d4add 100644
--- a/drbd/drbd_state.c
+++ b/drbd/drbd_state.c
@@ -1643,7 +1643,7 @@ handshake_found:
 				return SS_TWO_PRIMARIES;
 			if (!fail_io[NEW]) {
 				idr_for_each_entry(&resource->devices, device, vnr) {
-					if (!device->writable && device->open_cnt)
+					if (device->open_ro_cnt)
 						return SS_PRIMARY_READER;
 					/*
 					 * One might be tempted to add "|| open_rw_cont" here.
@@ -1670,7 +1670,7 @@ handshake_found:
 		     (disk_state[OLD] > D_DETACHING && disk_state[NEW] == D_DETACHING)))
 			return SS_IN_TRANSIENT_STATE;
 
-		if (role[OLD] == R_PRIMARY && role[NEW] == R_SECONDARY && device->writable &&
+		if (role[OLD] == R_PRIMARY && role[NEW] == R_SECONDARY && device->open_rw_cnt &&
 		    !(resource->state_change_flags & CS_FS_IGN_OPENERS))
 			return SS_DEVICE_IN_USE;
 
@@ -1702,8 +1702,7 @@ handshake_found:
 			return SS_NO_UP_TO_DATE_DISK;
 
 		/* Prevent detach or disconnect while held open read only */
-		if (!device->writable && device->open_cnt &&
-		    any_disk_up_to_date[OLD] && !any_disk_up_to_date[NEW])
+		if (device->open_ro_cnt && any_disk_up_to_date[OLD] && !any_disk_up_to_date[NEW])
 			return SS_NO_UP_TO_DATE_DISK;
 
 		if (disk_state[NEW] == D_NEGOTIATING)
-- 
2.45.2

